{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOgwpuPhOtLiW12cdCT6v0K"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# 1. Instalação de pacotes necessários\n","!pip install pyngrok streamlit numpy pandas plotly scipy matplotlib\n","\n","# 2. Configurar o ngrok\n","from pyngrok import ngrok\n","ngrok.set_auth_token(\"2wKz2Z4NRPygAVSwkm2PpsqzTO8_5Cp1CcoqDfDHHFJz2S3H8\")\n","\n","# 3. Criar o arquivo app.py usando Python padrão em vez de %%writefile\n","with open('app.py', 'w') as f:\n","    f.write('''\n","import streamlit as st\n","import numpy as np\n","import pandas as pd\n","import plotly.express as px\n","import plotly.graph_objects as go\n","from scipy.stats import binom\n","import matplotlib.pyplot as plt\n","import math\n","\n","# Configuração da página\n","st.set_page_config(page_title=\"Análise de Operações Aéreas - Aérea Confiável\",\n","                   layout=\"wide\",\n","                   initial_sidebar_state=\"expanded\")\n","\n","# Título e introdução\n","st.title(\"Análise de Operações Aéreas - Aérea Confiável\")\n","st.markdown(\"\"\"\n","Este aplicativo apresenta análises para apoiar decisões estratégicas da companhia aérea fictícia\n","Aérea Confiável, com foco em gestão de assentos e retorno sobre investimentos em tecnologia.\n","\"\"\")\n","\n","# Sidebar com parâmetros ajustáveis\n","st.sidebar.header(\"Parâmetros de Análise\")\n","\n","# Parâmetros de overbooking\n","st.sidebar.subheader(\"Parâmetros de Overbooking\")\n","capacidade_aviao = st.sidebar.number_input(\"Capacidade do avião (assentos)\", value=120, min_value=50, max_value=500)\n","prob_comparecimento = st.sidebar.slider(\"Probabilidade de comparecimento (%)\", value=88, min_value=70, max_value=100) / 100\n","max_passagens = st.sidebar.number_input(\"Máximo de passagens para análise\", value=130, min_value=int(capacidade_aviao), max_value=int(capacidade_aviao) + 20)\n","risco_maximo = st.sidebar.slider(\"Risco máximo de overbooking aceitável (%)\", value=7, min_value=1, max_value=20) / 100\n","\n","# Parâmetros financeiros\n","st.sidebar.subheader(\"Parâmetros Financeiros\")\n","preco_passagem = st.sidebar.number_input(\"Preço médio da passagem (R$)\", value=800, min_value=100, max_value=10000)\n","custo_compensacao = st.sidebar.number_input(\"Custo médio de compensação por passageiro (R$)\", value=1500, min_value=500, max_value=5000)\n","custo_reputacao = st.sidebar.number_input(\"Custo estimado de dano à reputação por incidente (R$)\", value=5000, min_value=0, max_value=50000)\n","\n","# Parâmetros de investimento em SI\n","st.sidebar.subheader(\"Investimento em Sistema de Informação\")\n","receita_adicional_projetada = st.sidebar.number_input(\"Receita adicional projetada (R$)\", value=80000, min_value=10000, max_value=500000)\n","custos_operacionais_anuais = st.sidebar.number_input(\"Custos operacionais anuais (R$)\", value=10000, min_value=1000, max_value=100000)\n","custo_investimento = st.sidebar.number_input(\"Custo do investimento (R$)\", value=100000, min_value=10000, max_value=1000000)\n","\n","# Parâmetros de simulação\n","st.sidebar.subheader(\"Parâmetros de Simulação Monte Carlo\")\n","num_simulacoes = st.sidebar.slider(\"Número de simulações\", value=1000, min_value=100, max_value=10000)\n","variacao_receita = st.sidebar.slider(\"Variação da receita (%)\", value=20, min_value=5, max_value=50)\n","variacao_custos = st.sidebar.slider(\"Variação dos custos (%)\", value=15, min_value=5, max_value=50)\n","\n","# Divisão em abas\n","tab1, tab2, tab3, tab4 = st.tabs([\"Análise de Overbooking\", \"Viabilidade Financeira\", \"ROI do Sistema de Informação\", \"Simulações Monte Carlo\"])\n","\n","# Tab 1: Análise de Overbooking\n","with tab1:\n","    st.header(\"Análise de Probabilidade de Overbooking\")\n","\n","    # Descrição da análise\n","    st.markdown(\"\"\"\n","    Esta análise utiliza a distribuição binomial para calcular a probabilidade de overbooking em voos.\n","    Um overbooking ocorre quando o número de passageiros que comparecem excede a capacidade de assentos do avião.\n","    \"\"\")\n","\n","    # Função para calcular probabilidade de overbooking\n","    @st.cache_data\n","    def calcular_prob_overbooking(n_passagens, capacidade, prob_comparecimento):\n","        # Probabilidade de k ou menos passageiros comparecerem (k = capacidade)\n","        prob_sem_overbooking = binom.cdf(capacidade, n_passagens, prob_comparecimento)\n","        # Probabilidade de mais de k passageiros comparecerem = overbooking\n","        prob_overbooking = 1 - prob_sem_overbooking\n","        return prob_overbooking\n","\n","    # Calculando probabilidades para diferentes números de passagens vendidas\n","    range_passagens = range(int(capacidade_aviao), int(max_passagens) + 1)\n","    prob_overbooking = [calcular_prob_overbooking(n, capacidade_aviao, prob_comparecimento) * 100 for n in range_passagens]\n","\n","    # Encontrar o número máximo de passagens que mantém o risco abaixo do limite\n","    df_prob = pd.DataFrame({\n","        \"Passagens Vendidas\": range_passagens,\n","        \"Probabilidade de Overbooking (%)\": prob_overbooking\n","    })\n","\n","    max_passagens_seguras = 0\n","    for i, row in df_prob.iterrows():\n","        if row[\"Probabilidade de Overbooking (%)\"] <= risco_maximo * 100:\n","            max_passagens_seguras = row[\"Passagens Vendidas\"]\n","\n","    # Criando gráfico interativo\n","    fig = px.line(df_prob, x=\"Passagens Vendidas\", y=\"Probabilidade de Overbooking (%)\",\n","                  title=\"Probabilidade de Overbooking por Número de Passagens Vendidas\")\n","\n","    # Adicionar linha horizontal para o limite de risco\n","    fig.add_hline(y=risco_maximo * 100, line_dash=\"dash\", line_color=\"red\",\n","                  annotation_text=f\"Limite de risco ({risco_maximo*100}%)\")\n","\n","    # Destacar o número máximo de passagens seguras\n","    if max_passagens_seguras > 0:\n","        fig.add_vline(x=max_passagens_seguras, line_dash=\"dash\", line_color=\"green\",\n","                      annotation_text=f\"Máx. passagens seguras ({max_passagens_seguras})\")\n","\n","    st.plotly_chart(fig, use_container_width=True)\n","\n","    # Mostrar resultado do número máximo de passagens seguras\n","    if max_passagens_seguras > 0:\n","        st.success(f\"O número máximo de passagens que podem ser vendidas mantendo o risco de overbooking abaixo de {risco_maximo*100}% é: **{max_passagens_seguras}**\")\n","    else:\n","        st.warning(f\"Não é possível manter o risco abaixo de {risco_maximo*100}% com os parâmetros atuais.\")\n","\n","    # Detalhamento das probabilidades\n","    st.subheader(\"Detalhamento das Probabilidades\")\n","    st.dataframe(df_prob)\n","\n","    # Exemplo de cálculo específico\n","    st.subheader(\"Demonstração de Cálculo\")\n","    n_exemplo = 130\n","    st.markdown(f\"\"\"\n","    **Exemplo de cálculo para {n_exemplo} passagens vendidas:**\n","\n","    - Capacidade do avião: {capacidade_aviao} assentos\n","    - Probabilidade de comparecimento: {prob_comparecimento*100}%\n","    - Overbooking ocorre quando mais de {capacidade_aviao} passageiros comparecem\n","\n","    Usando a distribuição binomial:\n","    - P(X > {capacidade_aviao}) = 1 - P(X ≤ {capacidade_aviao})\n","    - P(X ≤ {capacidade_aviao}) = soma das probabilidades de 0 a {capacidade_aviao} passageiros comparecerem\n","    \"\"\")\n","\n","    prob_específica = calcular_prob_overbooking(n_exemplo, capacidade_aviao, prob_comparecimento) * 100\n","    st.markdown(f\"**Resultado:** A probabilidade de overbooking com {n_exemplo} passagens vendidas é de **{prob_específica:.2f}%**\")\n","\n","# Tab 2: Viabilidade Financeira\n","with tab2:\n","    st.header(\"Análise de Viabilidade Financeira da Venda de Passagens Extras\")\n","\n","    st.markdown(\"\"\"\n","    Esta análise avalia se é financeiramente vantajoso vender passagens extras considerando:\n","    - Receita adicional gerada pelas passagens extras\n","    - Custos potenciais de compensação em caso de overbooking\n","    - Custos estimados de danos à imagem/reputação da empresa\n","    \"\"\")\n","\n","    # Função para calcular o valor esperado da venda de passagens extras\n","    def calcular_valor_esperado(n_passagens_extras, capacidade, prob_comparecimento, preco, custo_comp, custo_rep):\n","        # Receita total das passagens extras\n","        receita_extra = n_passagens_extras * preco\n","\n","        # Para cada possível número de passageiros extras que comparecem\n","        valor_esperado_custo = 0\n","        for k in range(n_passagens_extras + 1):\n","            # Probabilidade de exatamente k passageiros extras comparecerem\n","            prob_k = binom.pmf(k, n_passagens_extras, prob_comparecimento)\n","\n","            # Custo se k > capacidade extra (ou seja, se houver overbooking)\n","            if k > 0:  # Considerando que já estamos no limite da capacidade\n","                custo = k * custo_comp + custo_rep\n","                valor_esperado_custo += prob_k * custo\n","\n","        # Valor esperado = receita - custo esperado\n","        return receita_extra, valor_esperado_custo, receita_extra - valor_esperado_custo\n","\n","    # Calcular para diferentes números de passagens extras\n","    n_extras_range = range(1, 21)  # Analisar de 1 a 20 passagens extras\n","    resultados = []\n","\n","    for n_extras in n_extras_range:\n","        receita, custo_esperado, valor_liquido = calcular_valor_esperado(\n","            n_extras, capacidade_aviao, prob_comparecimento, preco_passagem, custo_compensacao, custo_reputacao)\n","\n","        # Probabilidade de overbooking com essas passagens extras\n","        nova_capacidade = capacidade_aviao + n_extras\n","        prob_over = calcular_prob_overbooking(nova_capacidade, capacidade_aviao, prob_comparecimento) * 100\n","\n","        resultados.append({\n","            \"Passagens Extras\": n_extras,\n","            \"Receita Adicional (R$)\": receita,\n","            \"Custo Esperado (R$)\": custo_esperado,\n","            \"Valor Líquido Esperado (R$)\": valor_liquido,\n","            \"Probabilidade de Overbooking (%)\": prob_over\n","        })\n","\n","    df_resultados = pd.DataFrame(resultados)\n","\n","    # Mostrar foco nas 10 passagens extras solicitadas\n","    st.subheader(\"Foco na Venda de 10 Passagens Extras\")\n","    dados_10_extras = df_resultados[df_resultados[\"Passagens Extras\"] == 10].iloc[0]\n","\n","    col1, col2, col3, col4 = st.columns(4)\n","    col1.metric(\"Receita Adicional\", f\"R$ {dados_10_extras['Receita Adicional (R$)']:.2f}\")\n","    col2.metric(\"Custo Esperado\", f\"R$ {dados_10_extras['Custo Esperado (R$)']:.2f}\")\n","    col3.metric(\"Valor Líquido\", f\"R$ {dados_10_extras['Valor Líquido Esperado (R$)']:.2f}\")\n","    col4.metric(\"Prob. Overbooking\", f\"{dados_10_extras['Probabilidade de Overbooking (%)']:.2f}%\")\n","\n","    # Conclusão sobre a venda de 10 passagens extras\n","    if dados_10_extras[\"Valor Líquido Esperado (R$)\"] > 0:\n","        st.success(\"É financeiramente vantajoso vender 10 passagens extras, com um valor líquido esperado positivo.\")\n","    else:\n","        st.error(\"Não é financeiramente vantajoso vender 10 passagens extras, pois o valor líquido esperado é negativo.\")\n","\n","    # Gráfico comparativo para diferentes números de passagens extras\n","    st.subheader(\"Análise Comparativa para Diferentes Números de Passagens Extras\")\n","\n","    fig1 = px.bar(df_resultados, x=\"Passagens Extras\", y=[\"Receita Adicional (R$)\", \"Custo Esperado (R$)\"],\n","                 title=\"Receita vs. Custo Esperado por Número de Passagens Extras\",\n","                 barmode=\"group\")\n","    st.plotly_chart(fig1, use_container_width=True)\n","\n","    fig2 = px.line(df_resultados, x=\"Passagens Extras\", y=\"Valor Líquido Esperado (R$)\",\n","                  title=\"Valor Líquido Esperado por Número de Passagens Extras\")\n","    fig2.add_hline(y=0, line_dash=\"dash\", line_color=\"red\")\n","    st.plotly_chart(fig2, use_container_width=True)\n","\n","    # Identificar o número ótimo de passagens extras\n","    idx_otimo = df_resultados[\"Valor Líquido Esperado (R$)\"].idxmax()\n","    n_otimo = df_resultados.iloc[idx_otimo][\"Passagens Extras\"]\n","    valor_otimo = df_resultados.iloc[idx_otimo][\"Valor Líquido Esperado (R$)\"]\n","\n","    st.success(f\"O número ótimo de passagens extras a vender é **{n_otimo}**, com um valor líquido esperado de **R$ {valor_otimo:.2f}**\")\n","\n","    # Mostrar tabela completa\n","    st.subheader(\"Tabela Completa de Resultados\")\n","    st.dataframe(df_resultados)\n","\n","# Tab 3: ROI do Sistema de Informação\n","with tab3:\n","    st.header(\"Análise de ROI para o Sistema de Informação\")\n","\n","    st.markdown(\"\"\"\n","    Esta análise calcula o Retorno sobre Investimento (ROI) para um sistema de informação\n","    que promete otimizar a gestão de passagens.\n","    \"\"\")\n","\n","    # Cálculo do ROI\n","    lucro_investimento = receita_adicional_projetada - custos_operacionais_anuais\n","    roi = (lucro_investimento / custo_investimento) * 100\n","\n","    # Visualização dos componentes do ROI\n","    col1, col2, col3 = st.columns(3)\n","    col1.metric(\"Receita Adicional\", f\"R$ {receita_adicional_projetada:.2f}\")\n","    col2.metric(\"Custos Operacionais\", f\"R$ {custos_operacionais_anuais:.2f}\")\n","    col3.metric(\"Custo do Investimento\", f\"R$ {custo_investimento:.2f}\")\n","\n","    # Mostrar resultado do ROI\n","    st.subheader(\"Resultado do ROI\")\n","    st.metric(\"Lucro do Investimento\", f\"R$ {lucro_investimento:.2f}\")\n","    st.metric(\"ROI\", f\"{roi:.2f}%\")\n","\n","    # Interpretação do ROI\n","    st.subheader(\"Interpretação do ROI\")\n","    if roi > 0:\n","        st.success(f\"O investimento é financeiramente viável com um ROI de {roi:.2f}%\")\n","\n","        # Tempo de retorno\n","        tempo_retorno = custo_investimento / lucro_investimento\n","        st.info(f\"Tempo estimado de retorno do investimento: {tempo_retorno:.2f} anos\")\n","\n","        if roi > 50:\n","            st.markdown(\"Este é um investimento de **alto retorno**.\")\n","        elif roi > 20:\n","            st.markdown(\"Este é um investimento de **bom retorno**.\")\n","        else:\n","            st.markdown(\"Este é um investimento de **retorno moderado**.\")\n","    else:\n","        st.error(f\"O investimento não é financeiramente viável com um ROI de {roi:.2f}%\")\n","\n","    # Visualização gráfica\n","    dados_roi = {\n","        \"Componente\": [\"Receita Adicional\", \"Custos Operacionais\", \"Lucro do Investimento\"],\n","        \"Valor (R$)\": [receita_adicional_projetada, custos_operacionais_anuais, lucro_investimento]\n","    }\n","    df_roi = pd.DataFrame(dados_roi)\n","\n","    fig = px.bar(df_roi, x=\"Componente\", y=\"Valor (R$)\", title=\"Componentes do ROI\",\n","                 color=\"Componente\")\n","    st.plotly_chart(fig, use_container_width=True)\n","\n","    # Análise de sensibilidade do ROI\n","    st.subheader(\"Análise de Sensibilidade do ROI\")\n","\n","    # Variação da receita\n","    variacao_receitas = np.linspace(receita_adicional_projetada * 0.5, receita_adicional_projetada * 1.5, 10)\n","    roi_por_receita = [(r - custos_operacionais_anuais) / custo_investimento * 100 for r in variacao_receitas]\n","\n","    # Variação dos custos operacionais\n","    variacao_custos_op = np.linspace(custos_operacionais_anuais * 0.5, custos_operacionais_anuais * 1.5, 10)\n","    roi_por_custo = [(receita_adicional_projetada - c) / custo_investimento * 100 for c in variacao_custos_op]\n","\n","    # Gráfico para variação de receita\n","    fig1 = px.line(x=[r/1000 for r in variacao_receitas], y=roi_por_receita,\n","                  labels={\"x\": \"Receita Adicional (R$ mil)\", \"y\": \"ROI (%)\"},\n","                  title=\"Sensibilidade do ROI à Variação da Receita Adicional\")\n","    fig1.add_hline(y=0, line_dash=\"dash\", line_color=\"red\")\n","    fig1.add_vline(x=receita_adicional_projetada/1000, line_dash=\"dash\", line_color=\"green\",\n","                  annotation_text=\"Receita Projetada\")\n","    st.plotly_chart(fig1, use_container_width=True)\n","\n","    # Gráfico para variação de custos operacionais\n","    fig2 = px.line(x=[c/1000 for c in variacao_custos_op], y=roi_por_custo,\n","                  labels={\"x\": \"Custos Operacionais (R$ mil)\", \"y\": \"ROI (%)\"},\n","                  title=\"Sensibilidade do ROI à Variação dos Custos Operacionais\")\n","    fig2.add_hline(y=0, line_dash=\"dash\", line_color=\"red\")\n","    fig2.add_vline(x=custos_operacionais_anuais/1000, line_dash=\"dash\", line_color=\"green\",\n","                  annotation_text=\"Custo Projetado\")\n","    st.plotly_chart(fig2, use_container_width=True)\n","\n","# Tab 4: Simulações Monte Carlo\n","with tab4:\n","    st.header(\"Simulações Monte Carlo para Análise de Risco do ROI\")\n","\n","    st.markdown(\"\"\"\n","    Esta análise utiliza simulações Monte Carlo para avaliar o desempenho do sistema em diferentes cenários,\n","    considerando incertezas no mercado e variações nos parâmetros financeiros.\n","    \"\"\")\n","\n","    # Função para realizar simulações Monte Carlo\n","    def simular_roi(num_sim, receita_base, custo_op_base, custo_inv, var_receita, var_custos):\n","        np.random.seed(42)  # Para reprodutibilidade\n","\n","        # Variações para cenários\n","        var_receita_decimal = var_receita / 100\n","        var_custos_decimal = var_custos / 100\n","\n","        # Arrays para armazenar resultados\n","        receitas = np.random.normal(receita_base, receita_base * var_receita_decimal, num_sim)\n","        custos_op = np.random.normal(custo_op_base, custo_op_base * var_custos_decimal, num_sim)\n","\n","        # Garantir que não haja valores negativos\n","        receitas = np.maximum(0, receitas)\n","        custos_op = np.maximum(0, custos_op)\n","\n","        # Calcular lucros e ROIs\n","        lucros = receitas - custos_op\n","        rois = (lucros / custo_inv) * 100\n","\n","        return receitas, custos_op, lucros, rois\n","\n","    # Realizar simulações\n","    receitas_sim, custos_op_sim, lucros_sim, rois_sim = simular_roi(\n","        num_simulacoes, receita_adicional_projetada, custos_operacionais_anuais,\n","        custo_investimento, variacao_receita, variacao_custos\n","    )\n","\n","    # Análise dos resultados da simulação\n","    roi_medio = np.mean(rois_sim)\n","    roi_mediano = np.median(rois_sim)\n","    roi_min = np.min(rois_sim)\n","    roi_max = np.max(rois_sim)\n","    prob_roi_positivo = np.mean(rois_sim > 0) * 100\n","\n","    # Mostrar estatísticas das simulações\n","    st.subheader(\"Estatísticas das Simulações\")\n","    col1, col2, col3 = st.columns(3)\n","    col1.metric(\"ROI Médio\", f\"{roi_medio:.2f}%\")\n","    col2.metric(\"ROI Mediano\", f\"{roi_mediano:.2f}%\")\n","    col3.metric(\"Probabilidade de ROI Positivo\", f\"{prob_roi_positivo:.2f}%\")\n","\n","    col1, col2 = st.columns(2)\n","    col1.metric(\"ROI Mínimo\", f\"{roi_min:.2f}%\")\n","    col2.metric(\"ROI Máximo\", f\"{roi_max:.2f}%\")\n","\n","    # Gráfico de distribuição dos ROIs\n","    fig = px.histogram(rois_sim, nbins=50, title=\"Distribuição dos ROIs nas Simulações\",\n","                      labels={\"value\": \"ROI (%)\", \"count\": \"Frequência\"})\n","    fig.add_vline(x=0, line_dash=\"dash\", line_color=\"red\")\n","    fig.add_vline(x=roi_medio, line_dash=\"dash\", line_color=\"green\",\n","                 annotation_text=\"ROI Médio\")\n","    st.plotly_chart(fig, use_container_width=True)\n","\n","    # Gráfico de dispersão (receita vs. ROI)\n","    fig_scatter = px.scatter(x=receitas_sim, y=rois_sim, opacity=0.6,\n","                            title=\"Relação entre Receita Adicional e ROI\",\n","                            labels={\"x\": \"Receita Adicional (R$)\", \"y\": \"ROI (%)\"})\n","    fig_scatter.add_hline(y=0, line_dash=\"dash\", line_color=\"red\")\n","    st.plotly_chart(fig_scatter, use_container_width=True)\n","\n","    # Definição de cenários\n","    percentis = np.percentile(rois_sim, [10, 50, 90])\n","    cenarios = {\n","        \"Pessimista (10%)\": percentis[0],\n","        \"Realista (50%)\": percentis[1],\n","        \"Otimista (90%)\": percentis[2]\n","    }\n","\n","    # Tabela de cenários\n","    st.subheader(\"Análise de Cenários\")\n","    data_cenarios = []\n","    for cenario, valor in cenarios.items():\n","        data_cenarios.append({\n","            \"Cenário\": cenario,\n","            \"ROI Esperado (%)\": valor\n","        })\n","    df_cenarios = pd.DataFrame(data_cenarios)\n","    st.dataframe(df_cenarios)\n","\n","    # Gráfico de cenários\n","    fig_cenarios = go.Figure()\n","    cores = [\"red\", \"blue\", \"green\"]\n","\n","    for i, (cenario, valor) in enumerate(cenarios.items()):\n","        fig_cenarios.add_trace(go.Bar(\n","            x=[cenario],\n","            y=[valor],\n","            name=cenario,\n","            marker_color=cores[i]\n","        ))\n","\n","    fig_cenarios.update_layout(\n","        title=\"ROI Esperado por Cenário\",\n","        yaxis_title=\"ROI (%)\",\n","        showlegend=False\n","    )\n","\n","    st.plotly_chart(fig_cenarios, use_container_width=True)\n","\n","    # Análise de valor em risco (VaR)\n","    var_95 = np.percentile(rois_sim, 5)\n","    st.subheader(\"Análise de Valor em Risco (VaR)\")\n","    st.markdown(f\"\"\"\n","    O **Valor em Risco (VaR)** com 95% de confiança é de **{abs(min(0, var_95)):.2f}%** de perda no ROI.\n","\n","    Isso significa que, com 95% de confiança, a perda máxima no ROI não ultrapassará {abs(min(0, var_95)):.2f}%.\n","    \"\"\")\n","\n","    # Conclusão geral\n","    st.subheader(\"Conclusão da Análise de Risco\")\n","    if prob_roi_positivo > 80:\n","        st.success(f\"\"\"\n","        O investimento no sistema de informação apresenta **baixo risco**, com {prob_roi_positivo:.2f}% de probabilidade\n","        de gerar um ROI positivo. A análise Monte Carlo sugere um ROI médio esperado de {roi_medio:.2f}%.\n","        \"\"\")\n","    elif prob_roi_positivo > 50:\n","        st.warning(f\"\"\"\n","        O investimento no sistema de informação apresenta **risco moderado**, com {prob_roi_positivo:.2f}% de probabilidade\n","        de gerar um ROI positivo. A análise Monte Carlo sugere um ROI médio esperado de {roi_medio:.2f}%.\n","        \"\"\")\n","    else:\n","        st.error(f\"\"\"\n","        O investimento no sistema de informação apresenta **alto risco**, com apenas {prob_roi_positivo:.2f}% de probabilidade\n","        de gerar um ROI positivo. A análise Monte Carlo sugere um ROI médio esperado de {roi_medio:.2f}%.\n","        \"\"\")\n","\n","# Conclusão geral do aplicativo\n","st.markdown(\"---\")\n","st.header(\"Conclusões e Recomendações\")\n","\n","# Obter conclusões de cada análise\n","if \"max_passagens_seguras\" in locals() and max_passagens_seguras > 0:\n","    conclusao_overbooking = f\"Vender até {max_passagens_seguras} passagens é seguro mantendo o risco abaixo de {risco_maximo*100}%.\"\n","else:\n","    conclusao_overbooking = \"Não foi possível identificar um número seguro de passagens extras com os parâmetros atuais.\"\n","\n","if \"n_otimo\" in locals():\n","    conclusao_viabilidade = f\"O número ótimo de passagens extras a vender é {n_otimo}, com valor líquido esperado de R$ {valor_otimo:.2f}.\"\n","else:\n","    conclusao_viabilidade = \"A análise de viabilidade não pôde determinar um número ótimo de passagens extras.\"\n","\n","if \"roi\" in locals():\n","    if roi > 0:\n","        conclusao_roi = f\"O investimento no sistema de informação é viável com ROI de {roi:.2f}%.\"\n","    else:\n","        conclusao_roi = f\"O investimento no sistema de informação não é viável com ROI de {roi:.2f}%.\"\n","else:\n","    conclusao_roi = \"Não foi possível calcular o ROI com os parâmetros fornecidos.\"\n","\n","if \"prob_roi_positivo\" in locals():\n","    conclusao_simulacao = f\"As simulações indicam {prob_roi_positivo:.2f}% de chance de ROI positivo, com ROI médio de {roi_medio:.2f}%.\"\n","else:\n","    conclusao_simulacao = \"Não foi possível realizar as simulações com os parâmetros fornecidos.\"\n","\n","# Exibir conclusões\n","st.markdown(f\"\"\"\n","### Resumo das Conclusões:\n","\n","1. **Análise de Overbooking:** {conclusao_overbooking}\n","\n","2. **Viabilidade Financeira:** {conclusao_viabilidade}\n","\n","3. **ROI do Sistema:** {conclusao_roi}\n","\n","4. **Análise de Risco:** {conclusao_simulacao}\n","\n","### Recomendações Finais:\n","\n","Com base nas análises realizadas, recomendamos:\n","\n","- Implementar uma política de overbooking controlado, mantendo o número de passagens vendidas dentro do limite seguro calculado.\n","- Investir no sistema de informação proposto, que demonstra viabilidade financeira e bom potencial de retorno.\n","- Monitorar constantemente os parâmetros reais (taxa de comparecimento, custos de compensação) para ajustar as estratégias.\n","- Considerar a implementação de um sistema de incentivos para passageiros voluntariamente cederem seus lugares em casos de overbooking.\n","\n","Este aplicativo pode ser utilizado para simular diferentes cenários e ajustar parâmetros conforme as condições de mercado se alterem.\n","\"\"\")\n","\n","# Informações finais e disclaimer\n","st.markdown(\"---\")\n","st.caption(\"\"\"\n","**Disclaimer:** Este aplicativo foi desenvolvido para fins de demonstração. Os dados e análises são fictícios e\n","não devem ser utilizados para tomada de decisões reais sem validação adicional.\n","\n","© 2025 Análise de Operações Aéreas - Desenvolvido para Aérea Confiável\n","\"\"\")\n","''')\n","\n","# 4. Iniciar o servidor Streamlit e criar um túnel ngrok\n","import os\n","from pyngrok import ngrok\n","\n","# Matar qualquer serviço Streamlit que esteja rodando\n","!pkill -f streamlit || true\n","\n","# Iniciar o Streamlit\n","!nohup streamlit run app.py &\n","\n","# Criar um túnel ngrok para o servidor Streamlit\n","public_url = ngrok.connect(8501)\n","print(f\"O aplicativo Streamlit está disponível em: {public_url}\")\n","\n","# Manter o túnel ativo\n","from IPython.display import HTML, display\n","display(HTML(f'<a href=\"{public_url}\" target=\"_blank\">Clique aqui para abrir o aplicativo Streamlit</a>'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1165},"id":"EoP81Ryi4riu","executionInfo":{"status":"ok","timestamp":1745885522127,"user_tz":180,"elapsed":8671,"user":{"displayName":"Tiago Gondim","userId":"06012087523626264000"}},"outputId":"a6415fe3-dcba-430d-863c-201fb40310a6"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pyngrok\n","  Downloading pyngrok-7.2.5-py3-none-any.whl.metadata (8.9 kB)\n","Collecting streamlit\n","  Downloading streamlit-1.44.1-py3-none-any.whl.metadata (8.9 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (5.24.1)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.15.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.11/dist-packages (from pyngrok) (6.0.2)\n","Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n","Requirement already satisfied: blinker<2,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n","Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n","Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.1.8)\n","Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n","Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n","Requirement already satisfied: protobuf<6,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n","Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n","Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n","Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n","Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n","Collecting watchdog<7,>=2.1.5 (from streamlit)\n","  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n","Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n","  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n","Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n","Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n","Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.36.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.1.31)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n","Downloading pyngrok-7.2.5-py3-none-any.whl (23 kB)\n","Downloading streamlit-1.44.1-py3-none-any.whl (9.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.8/9.8 MB\u001b[0m \u001b[31m86.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m88.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: watchdog, pyngrok, pydeck, streamlit\n","Successfully installed pydeck-0.9.1 pyngrok-7.2.5 streamlit-1.44.1 watchdog-6.0.0\n","^C\n","nohup: appending output to 'nohup.out'\n","O aplicativo Streamlit está disponível em: NgrokTunnel: \"https://44fc-34-150-137-151.ngrok-free.app\" -> \"http://localhost:8501\"\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<a href=\"NgrokTunnel: \"https://44fc-34-150-137-151.ngrok-free.app\" -> \"http://localhost:8501\"\" target=\"_blank\">Clique aqui para abrir o aplicativo Streamlit</a>"]},"metadata":{}}]}]}